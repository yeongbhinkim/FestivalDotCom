<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.googoo.festivaldotcom.domain.chat.infrastructure.mapper.ChatRoomMapper">

    <!--    select    -->
    <select id="selectChatRoomsByUserId" resultType="Rooms">
        SELECT *
        FROM rooms JOIN room_members
          ON rooms.room_id = room_members.room_id
        WHERE room_members.id = #{userId}
        AND rooms.deleted = 0
        AND room_members.deleted = 0
        ORDER BY rooms.last_message_at DESC
    </select>

    <!--  채팅 목록 유무 체크  -->
    <select id="selectChatRoomsByUserIdCount" resultType="long">
        SELECT count(id)
        FROM room_members
        WHERE room_members.id = #{userId}
          AND room_members.deleted = 0
    </select>

<!--    <select id="findChatRoomById" resultType="ChatRoom">
        SELECT * FROM chat_rooms WHERE room_id = #{roomId}
    </select>-->

    <!--    insert    -->
    <insert id="insertRoom" useGeneratedKeys="true" keyProperty="roomId" parameterType="Rooms">
        INSERT INTO rooms (
              festival_id,
              room_name
        ) VALUES (
              #{festivalId},
              #{roomName}
         )
    </insert>

    <insert id="insertRoomMember">
        INSERT INTO room_members (
              room_id,
              id
        ) VALUES
        <foreach collection="userIds" item="userId" separator=","> (
             #{roomId},
             #{userId}
        ) </foreach>
    </insert>

    <!-- 축제 신청 중복 체크  -->
    <select id="selectRegistrationCount" resultType="long">
        SELECT count(registration_id)
        FROM registration
        WHERE festival_id = #{festivalId}
        AND id = #{id}
    </select>

    <insert id="insertRegistration">
        INSERT INTO registration (
            festival_id,
            id
        ) VALUES (
            #{festivalId},
            #{id}
        )
    </insert>

    <!--    update    -->
    <update id="updateLastMessageTime">
        UPDATE rooms
        SET last_message_at = NOW()
        WHERE room_id = #{roomId}
    </update>
    <!--    delete    -->


    <!-- 특정 축제의 참가 신청 조회 -->
    <select id="findRegistrationByFestivalId" resultType="com.googoo.festivaldotcom.domain.chat.application.dto.request.SchedulerRoomDTO">
        SELECT registration.festival_id, registration.id, users.gender
        FROM registration
            JOiN users ON registration.id = users.id
        WHERE registration.festival_id = #{festivalId}
    </select>

    <!-- 채팅방 생성 -->
    <insert id="insertChatRoom" useGeneratedKeys="true" keyProperty="roomId">
        INSERT INTO rooms (
            festival_id,
            room_name
        ) VALUES (
            #{festivalId},
            #{roomName}
        )
    </insert>

    <!-- 채팅 멤버 추가 -->
    <insert id="insertChatMember">
        INSERT INTO room_members (
            room_id,
            id
        ) VALUES (
            #{roomId},
            #{id}
        )
    </insert>

    <!-- 축제 채팅 나가기  -->
    <update id="deleteChatMember">
        UPDATE room_members
        SET deleted = 1
        WHERE room_id = #{roomId}
        AND id = #{id}
        AND deleted = 0
    </update>


</mapper>